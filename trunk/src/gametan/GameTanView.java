/*
 * GameTanView.java
 */

package gametan;

import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.SynchronousQueue;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 * The application's main frame.
 */
public class GameTanView extends FrameView {

    public GameTanView(SingleFrameApplication app) {
        super(app);
        this.queue = new SynchronousQueue<Integer>();
        
        getFrame().setExtendedState(JFrame.MAXIMIZED_BOTH);
        getFrame().setResizable(false);
        
        initComponents();
        
        this.pnList = new ArrayList<JPanel>();
        this.pnList.add(pnDeck);
        this.pnList.add(pnPlayerBottom);
        this.pnList.add(pnPlayerTop);

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            @Override
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = GameTanApp.getApplication().getMainFrame();
            aboutBox = new GameTanAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        GameTanApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        /*
        pnPlayerBottom = new javax.swing.JPanel();
        */
        this.pnPlayerBottom = new jPlayerPanel(true);
        /*
        pnPlayerTop = new javax.swing.JPanel();
        */
        this.pnPlayerTop = new jPlayerPanel(false);
        pnCtrlButton = new javax.swing.JPanel();
        btnSort = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnTake = new javax.swing.JButton();
        cbHelp = new javax.swing.JCheckBox();
        btnSkip = new javax.swing.JButton();
        pnInfo = new javax.swing.JPanel();
        /*
        pnDeck = new javax.swing.JPanel();
        */
        this.pnDeck = new jDeckPanel();
        /*
        pnRightSession = new javax.swing.JPanel();
        */
        this.pnRightSession = new jSessionPanel();
        /*
        pnLeftSession = new javax.swing.JPanel();
        */
        this.pnLeftSession = new jSessionPanel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenuNew = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                mainPanelComponentResized(evt);
            }
        });

        pnPlayerBottom.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnPlayerBottom.setAutoscrolls(true);
        pnPlayerBottom.setName("pnPlayerBottom"); // NOI18N
        pnPlayerBottom.setPreferredSize(new java.awt.Dimension(400, 110));
        pnPlayerBottom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnPlayerBottomMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnPlayerBottomLayout = new javax.swing.GroupLayout(pnPlayerBottom);
        pnPlayerBottom.setLayout(pnPlayerBottomLayout);
        pnPlayerBottomLayout.setHorizontalGroup(
            pnPlayerBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 709, Short.MAX_VALUE)
        );
        pnPlayerBottomLayout.setVerticalGroup(
            pnPlayerBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 106, Short.MAX_VALUE)
        );

        pnPlayerTop.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnPlayerTop.setName("pnPlayerTop"); // NOI18N
        pnPlayerTop.setPreferredSize(new java.awt.Dimension(400, 110));

        javax.swing.GroupLayout pnPlayerTopLayout = new javax.swing.GroupLayout(pnPlayerTop);
        pnPlayerTop.setLayout(pnPlayerTopLayout);
        pnPlayerTopLayout.setHorizontalGroup(
            pnPlayerTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 709, Short.MAX_VALUE)
        );
        pnPlayerTopLayout.setVerticalGroup(
            pnPlayerTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 106, Short.MAX_VALUE)
        );

        pnCtrlButton.setName("Button Control"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(gametan.GameTanApp.class).getContext().getResourceMap(GameTanView.class);
        btnSort.setText(resourceMap.getString("btnSort.text")); // NOI18N
        btnSort.setName("btnSort"); // NOI18N
        btnSort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSortMouseClicked(evt);
            }
        });

        btnPlay.setText(resourceMap.getString("btnPlay.text")); // NOI18N
        btnPlay.setName("btnPlay"); // NOI18N
        btnPlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPlayMouseClicked(evt);
            }
        });

        btnTake.setText(resourceMap.getString("btnTake.text")); // NOI18N
        btnTake.setName("btnTake"); // NOI18N
        btnTake.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTakeMouseClicked(evt);
            }
        });

        cbHelp.setText(resourceMap.getString("cbHelp.text")); // NOI18N
        cbHelp.setActionCommand(resourceMap.getString("cbHelp.actionCommand")); // NOI18N
        cbHelp.setName("cbHelp"); // NOI18N
        cbHelp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbHelpItemStateChanged(evt);
            }
        });

        btnSkip.setText(resourceMap.getString("btnSkip.text")); // NOI18N
        btnSkip.setName("btnSkip"); // NOI18N
        btnSkip.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSkipMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnCtrlButtonLayout = new javax.swing.GroupLayout(pnCtrlButton);
        pnCtrlButton.setLayout(pnCtrlButtonLayout);
        pnCtrlButtonLayout.setHorizontalGroup(
            pnCtrlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCtrlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPlay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTake)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSkip)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbHelp, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
        );

        pnCtrlButtonLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnPlay, btnSkip, btnSort, btnTake});

        pnCtrlButtonLayout.setVerticalGroup(
            pnCtrlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCtrlButtonLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(pnCtrlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPlay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTake, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSkip)
                    .addComponent(cbHelp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        btnSkip.getAccessibleContext().setAccessibleName(resourceMap.getString("btnSkip.AccessibleContext.accessibleName")); // NOI18N

        pnInfo.setName("pnInfo"); // NOI18N

        javax.swing.GroupLayout pnInfoLayout = new javax.swing.GroupLayout(pnInfo);
        pnInfo.setLayout(pnInfoLayout);
        pnInfoLayout.setHorizontalGroup(
            pnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 232, Short.MAX_VALUE)
        );
        pnInfoLayout.setVerticalGroup(
            pnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 53, Short.MAX_VALUE)
        );

        pnDeck.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnDeck.setName("pnDeck"); // NOI18N

        javax.swing.GroupLayout pnDeckLayout = new javax.swing.GroupLayout(pnDeck);
        pnDeck.setLayout(pnDeckLayout);
        pnDeckLayout.setHorizontalGroup(
            pnDeckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 193, Short.MAX_VALUE)
        );
        pnDeckLayout.setVerticalGroup(
            pnDeckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 177, Short.MAX_VALUE)
        );

        pnRightSession.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnRightSession.setName("pnRightSession"); // NOI18N
        pnRightSession.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnRightSessionMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnRightSessionLayout = new javax.swing.GroupLayout(pnRightSession);
        pnRightSession.setLayout(pnRightSessionLayout);
        pnRightSessionLayout.setHorizontalGroup(
            pnRightSessionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );
        pnRightSessionLayout.setVerticalGroup(
            pnRightSessionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 177, Short.MAX_VALUE)
        );

        pnLeftSession.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnLeftSession.setName("pnLeftSession"); // NOI18N
        pnLeftSession.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnLeftSessionMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnLeftSessionLayout = new javax.swing.GroupLayout(pnLeftSession);
        pnLeftSession.setLayout(pnLeftSessionLayout);
        pnLeftSessionLayout.setHorizontalGroup(
            pnLeftSessionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );
        pnLeftSessionLayout.setVerticalGroup(
            pnLeftSessionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 177, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnPlayerBottom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(pnLeftSession, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnDeck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnRightSession, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnPlayerTop, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(pnInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnCtrlButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnPlayerTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnRightSession, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnDeck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnLeftSession, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnPlayerBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnCtrlButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {pnPlayerBottom, pnPlayerTop});

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {pnCtrlButton, pnInfo});

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(gametan.GameTanApp.class).getContext().getActionMap(GameTanView.class, this);
        jMenuNew.setAction(actionMap.get("jMenuNewAction")); // NOI18N
        jMenuNew.setText(resourceMap.getString("jMenuNew.text")); // NOI18N
        jMenuNew.setName("jMenuNew"); // NOI18N
        fileMenu.add(jMenuNew);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 563, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void mainPanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_mainPanelComponentResized
	// TODO add your handling code here:
	this.pnRepaint();
    }//GEN-LAST:event_mainPanelComponentResized

    private void btnSortMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSortMouseClicked
	// TODO add your handling code here:
	this.player.sortCards();
        this.pnPlayerBottom.setIndChoose(-1);
        this.pnRepaint();
    }//GEN-LAST:event_btnSortMouseClicked

    private void pnPlayerBottomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnPlayerBottomMouseClicked
	// TODO add your handling code here:
	if (this.pnPlayerBottom.checkCor(evt.getX(), evt.getY()))
	    this.pnPlayerBottom.repaint();
    }//GEN-LAST:event_pnPlayerBottomMouseClicked

    private void cbHelpItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbHelpItemStateChanged
        // TODO add your handling code here:
        this.pnPlayerBottom.setShowHelp(this.cbHelp.isSelected());
        this.pnRepaint();
    }//GEN-LAST:event_cbHelpItemStateChanged

    private void btnPlayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPlayMouseClicked
        if (this.player.getSessionState() == Player.PlayerSessionState.WAIT) return;
	try {
            int i = this.pnPlayerBottom.getIndChoose();
            if (this.pnPlayerBottom.checkPlay()) {
                this.queue.put(i);
                this.pnPlayerBottom.setIndChoose(-1);
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(GameTanView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPlayMouseClicked

    private void btnTakeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTakeMouseClicked
        if (this.player.getSessionState() == Player.PlayerSessionState.WAIT) return;
        try {
            if (this.player.getSessionType() == Player.PlayerSessionType.PASSIVE) {
                this.queue.put(-1);
                this.pnPlayerBottom.setIndChoose(-1);
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(GameTanView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnTakeMouseClicked

    private void btnSkipMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSkipMouseClicked
        // TODO add your handling code here:
        try {
            if (this.player.getSessionType() == Player.PlayerSessionType.ACTIVE || this.player.getSessionType() == Player.PlayerSessionType.SUPPORT) {
                this.queue.put(-2);
                this.pnPlayerBottom.setIndChoose(-1);
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(GameTanView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSkipMouseClicked

    private void pnRightSessionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnRightSessionMouseClicked
	if (!this.pnRightSession.isActive()) return;
	if (this.session.getState() != Session.SessionState.WAITING) return;
	try {
	    this.queue.put(-3);
	    this.pnPlayerBottom.setIndChoose(-1);
        } catch (InterruptedException ex) {
            Logger.getLogger(GameTanView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pnRightSessionMouseClicked

    private void pnLeftSessionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnLeftSessionMouseClicked
	if (!this.pnLeftSession.isActive()) return;
	if (this.session.getState() != Session.SessionState.WAITING) return;
	try {
	    this.queue.put(-3);
	    this.pnPlayerBottom.setIndChoose(-1);
        } catch (InterruptedException ex) {
            Logger.getLogger(GameTanView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pnLeftSessionMouseClicked

    @Action
    public void jMenuNewAction() {
        this.table = new Table(Table.TWO_PLAYER, 1);
        this.player = this.table.getPlayer(0);
        this.session = new Session(this.queue, this.table, this.pnList, this.pnLeftSession, this.pnRightSession);
        this.pnDeck.setTable(this.table);
        this.table.serveCards();
        this.pnPlayerBottom.setPlayer(this.player);
        // debug
        this.pnPlayerTop.setPlayer(this.table.getPlayer(1));
	this.pnPlayerTop.setShow(true);
        this.pnRepaint();
        this.session.initSession(this.table.getFisrtPlayer());
        new Thread(session).start();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnSkip;
    private javax.swing.JButton btnSort;
    private javax.swing.JButton btnTake;
    private javax.swing.JCheckBox cbHelp;
    private javax.swing.JMenuItem jMenuNew;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel pnCtrlButton;
    /*
    private javax.swing.JPanel pnDeck;
    */
    private jDeckPanel pnDeck;
    private javax.swing.JPanel pnInfo;
    /*
    private javax.swing.JPanel pnLeftSession;
    */
    private jSessionPanel pnLeftSession;
    /*
    private javax.swing.JPanel pnPlayerBottom;
    */
    private jPlayerPanel pnPlayerBottom;
    /*
    private javax.swing.JPanel pnPlayerTop;
    */
    private jPlayerPanel pnPlayerTop;
    /*
    private javax.swing.JPanel pnRightSession;
    */
    private jSessionPanel pnRightSession;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
    
    private Table table;
    private Player player;
    private ArrayList<JPanel> pnList;
    private Session session;
    private BlockingQueue<Integer> queue;
    
    public void pnRepaint() {
        this.pnPlayerBottom.updateUI();
        this.pnPlayerTop.updateUI();
        this.pnDeck.updateUI();
    }
}
